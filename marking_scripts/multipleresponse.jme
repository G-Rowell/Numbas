numAnswers: len(settings["matrix"])

numChoices: if(numAnswers=1,1,len(settings["matrix"][0]))

numTicks (How many options did the student tick?):
  sum(map(sum(map(if(x,1,0),x,row)),row,studentAnswer))

wrongNumber:
  assert(numTicks >= settings["minAnswers"] and (settings["maxAnswers"]=0 or numTicks<=settings["maxAnswers"]),
    if(settings["warningType"]="prevent",
        fail(translate("part.mcq.wrong number of choices"))
    ,
        incorrect(translate("part.mcq.wrong number of choices"));
        end()
    )
  )

tick_indexes (Indexes of choice/answer pairs):
    flatten(map(
        map([x,y], x, shuffleAnswers),
        y,
        shuffleChoices
    ))

only_ticked_score_ticks (The score for each choice/answer pair):
  map(
    if(studentAnswer[x][y],
      let(distractor,settings["distractors"][x][y], credit, if(marks=0,0,settings["matrix"][x][y]/marks),
        switch(
          credit<>0,
            if(not isnonemptyhtml(distractor),
              add_credit(credit,translate(if(credit>0,'part.mcq.correct choice','part.mcq.incorrect choice')))
            ,
              add_credit(credit,distractor)
            )
          ,
            if(isnonemptyhtml(distractor),negative_feedback(distractor),if(marks<>0,negative_feedback(translate('part.mcq.incorrect choice')),false))
        );credit
      )
    ,
      0
    ),
    [x,y],
    tick_indexes
  )


layout_tick_indexes (Indexes of choice/answer pairs shown in the layout):
    filter(layout[tick[0]][tick[1]],tick,tick_indexes)

binary_score_ticks (Scores and feedback for each choice/answer pair, in the "binary" marking method):
    let(
        per_tick, 1/len(layout_tick_indexes),
        scores,map(
            let(distractor,settings["distractors"][x][y],
                should_tick, settings["matrix"][x][y]>0,
                if(studentAnswer[x][y]=should_tick,
                    per_tick
                ,
                    assert(not isnonemptyhtml(distractor),negative_feedback(distractor));
                    0
                )
            ),
            [x,y],
            layout_tick_indexes
        ),
        total, sum(scores),
        switch(
            total=1,correct(),
            total=0 or settings["markingMethod"]="all-or-nothing",incorrect(),
            set_credit(total,translate('part.marking.partially correct'))
        )
    )

score_ticks:
    switch(
        settings["markingMethod"] in ["score per matched cell","all-or-nothing"], apply(binary_score_ticks);binary_score_ticks,
        apply(only_ticked_score_ticks);only_ticked_score_ticks
    )

total_score: 
    sum(score_ticks)

mark:
  assert(marks>0,correct());  // any answer is correct when 0 marks are available
  assert(settings["markingMethod"]<>"sum ticked cells" or numTicks>0,
    warn(translate("part.marking.nothing entered"));
    fail(translate("part.marking.nothing entered"))
  );
  apply(wrongNumber);
  apply(score_ticks)

interpreted_answer (The student's answer, to be reused by other parts):
  studentAnswer
