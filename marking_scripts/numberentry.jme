studentNumber (The student's answer, parsed as a number):
    if(settings["allowFractions"],
        parsedecimal_or_fraction(studentAnswer,settings["notationStyles"])
    ,
        parsedecimal(studentAnswer,settings["notationStyles"])
    )

isInteger (Is the student's answer an integer?):
    countdp(studentAnswer)=0

isFraction (Is the student's answer a fraction?):
    "/" in studentAnswer

numerator (The numerator of the student's answer, or 0 if not a fraction):
    if(isFraction,
        parsenumber(split(studentAnswer,"/")[0],settings["notationStyles"])
    ,
        0
    )

denominator (The numerator of the student's answer, or 0 if not a fraction):
    if(isFraction,
        parsenumber(split(studentAnswer,"/")[1],settings["notationStyles"])
    ,
        0
    )

cancelled (Is the student's answer a cancelled fraction?):
    assert(isFraction and gcd(numerator,denominator)=1,
        assert(not settings["mustBeReduced"],
            multiply_credit(settings["mustBeReducedPC"],translate("part.numberentry.answer not reduced"))
        );
        false
    )

cleanedStudentAnswer:
    cleannumber(studentAnswer, settings["notationStyles"])

student_is_scientific (Is the student's answer written in scientific notation?):
    not isnan(matchnumber(studentAnswer, ["scientific"])[1])

scientific_precision_offset (A number in scientific notation has 1 more significant digit than decimal places):
    award(1,settings["precisionType"]="dp")

studentPrecision:
    max(settings["precision"],
        switch(
            student_is_scientific, countsigfigs(cleanedStudentAnswer)-scientific_precision_offset,
            settings["precisionType"]="dp", max(settings["precision"],countdp(cleanedStudentAnswer)),
            settings["precisionType"]="sigfig", max(settings["precision"],countsigfigs(cleanedStudentAnswer)),
            0
        )
    )

raw_minvalue:
    switch(
        student_is_scientific, siground(settings["minvalue"],studentPrecision+scientific_precision_offset),
        settings["precisionType"]="dp", precround(settings["minvalue"],studentPrecision),
        settings["precisionType"]="sigfig", siground(settings["minvalue"],studentPrecision),
        settings["minvalue"]
    )

raw_maxvalue:
    switch(
        student_is_scientific, siground(settings["maxvalue"],studentPrecision+scientific_precision_offset),
        settings["precisionType"]="dp", precround(settings["maxvalue"],studentPrecision),
        settings["precisionType"]="sigfig", siground(settings["maxvalue"],studentPrecision),
        settings["maxvalue"]
    )

minvalue: min(raw_minvalue,raw_maxvalue)

maxvalue: max(raw_minvalue,raw_maxvalue)

validNumber (Is the student's answer a valid number?):
    if(isnan(studentNumber),
        warn(translate("part.numberentry.answer invalid"));
        fail(translate("part.numberentry.answer invalid"))
    ,
        true
    )

numberInRange (Is the student's number in the allowed range?):
    if(studentNumber>=minvalue and studentNumber<=maxvalue,
        correct()
    ,
        incorrect();
        end()
    )

correctPrecision (Has the student's answer been given to the desired precision?):     
    if(
        if(student_is_scientific,
            togivenprecision_scientific(studentAnswer,settings['precisionType'],settings['precision']),
            togivenprecision(cleanedStudentAnswer,settings['precisionType'],settings['precision'],settings["strictPrecision"])
        )
    ,
        true
    ,
        multiply_credit(settings["precisionPC"],settings["precisionMessage"]);
        false
    )

mark (Mark the student's answer):
    apply(validNumber);
    apply(numberInRange);
    assert(numberInRange,end());
    if(isFraction,
        apply(cancelled)
    ,
        apply(correctPrecision)
    )
 
interpreted_answer (The student's answer, to be reused by other parts):
    apply(validNumber);
    studentNumber

